{"version":3,"sources":["components/MediaCard.js","components/NewSearch.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","borderRadius","media","height","breakpoints","up","content","backgroundColor","action","typo","color","para","MediaCard","title","name","avatar","classes","Card","className","CardActionArea","CardMedia","image","CardContent","Typography","gutterBottom","variant","component","style","fontFamily","NewSearch","useState","searchData","setSearchData","setTitle","titleBtnClick","setTitleBtnClick","amount","setAmount","handleSearchClick","useEffect","fetch","then","res","json","data","hits","AppBar","Toolbar","IconButton","onClick","TextField","onChange","e","target","value","onKeyUp","keyCode","placeholder","Divider","width","marginLeft","orientation","InputLabel","padding","id","Select","labelId","MenuItem","margin","textAlign","textTransform","paddingLeft","Grid","container","spacing","map","img","item","key","xs","sm","lg","tags","user","largeImageURL","myMargin","maxWidth","createMuiTheme","palette","primary","blue","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bb5bd625.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    borderRadius: 0,\n  },\n  media: {\n    height: 200,\n    [theme.breakpoints.up(\"md\")]: {\n      height: 300,\n    },\n  },\n  content: {\n    backgroundColor: \"#303030\",\n  },\n  action: {\n    backgroundColor: \"#555\",\n  },\n  typo: {\n    color: \"dodgerblue\",\n  },\n  para: {\n    color: \"#ddd\",\n  },\n}));\n\nfunction MediaCard({ title, name, avatar }) {\n  const classes = useStyles();\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia className={classes.media} image={avatar} title={title} />\n        <CardContent className={classes.content}>\n          <Typography color=\"primary\" gutterBottom variant=\"h6\" component=\"h2\">\n            {title}\n          </Typography>\n          <Typography style={{ fontFamily: \"Kaushan Script, cursive\" }} className={classes.para} variant=\"body2\" component=\"p\">\n            by: {name}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nexport default MediaCard;\n","import React, { useState, useEffect } from \"react\";\nimport { Grid, AppBar, Toolbar, TextField, InputLabel, Select, MenuItem, Typography, IconButton, Divider } from \"@material-ui/core\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport MediaCard from \"./MediaCard\";\n\nfunction NewSearch() {\n  const [searchData, setSearchData] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [titleBtnClick, setTitleBtnClick] = useState(\"hawaii\");\n  const [amount, setAmount] = useState(10);\n\n  const apiUrl = \"https://pixabay.com/api/\";\n  const apiKey = \"16142259-7ff05626ba8af26f94db0290b\";\n\n  useEffect(() => {\n    fetch(`${apiUrl}?key=${apiKey}&q=${titleBtnClick}&image_type=photo&per_page=${amount}&safesearch=true`)\n      .then((res) => res.json())\n      .then((data) => setSearchData(data.hits));\n  }, [titleBtnClick, amount]);\n\n  function setImagesShown(e) {\n    setAmount(e.target.value);\n  }\n\n  function setSearchTitle(e) {\n    setTitle(e.target.value);\n  }\n\n  function handleSearchClick() {\n    setTitleBtnClick(title);\n  }\n\n  function searchKeyPressHandler(e) {\n    if (e.keyCode === 13) {\n      handleSearchClick();\n    }\n  }\n\n  return (\n    <div>\n      <AppBar color=\"default\">\n        <Toolbar>\n          <IconButton onClick={handleSearchClick}>\n            <SearchIcon />\n          </IconButton>\n          <TextField onChange={setSearchTitle} onKeyUp={searchKeyPressHandler} placeholder=\"Search...\" />\n\n          <Divider style={{ width: \"1px\", height: \"40px\", marginLeft: \"15px\" }} orientation=\"vertical\" />\n          <InputLabel style={{ padding: \"0 10px\" }} id=\"demo-simple-select-label\">\n            Images to show:\n          </InputLabel>\n          <Select color=\"primary\" labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={amount} onChange={setImagesShown}>\n            <MenuItem value={10}>Ten</MenuItem>\n            <MenuItem value={25}>Twenty-Five</MenuItem>\n            <MenuItem value={50}>Fifty</MenuItem>\n          </Select>\n        </Toolbar>\n      </AppBar>\n\n      <Typography variant=\"h2\" style={{ fontFamily: \"Kaushan Script, cursive\", color: \"#fff\", margin: \"50px auto\", textAlign: \"center\" }}>\n        Image Gallery\n      </Typography>\n      <Typography style={{ color: \"white\", textTransform: \"uppercase\", paddingLeft: \"5px\" }}>Images of: {titleBtnClick}</Typography>\n\n      <Grid container spacing={2} style={{ padding: \"5px\" }}>\n        {searchData.map((img) => (\n          <Grid item key={img.id} xs={12} sm={6} lg={4}>\n            <MediaCard title={img.tags} name={img.user} avatar={img.largeImageURL} />\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default NewSearch;\n","import React from \"react\";\nimport NewSearch from \"./components/NewSearch\";\nimport \"./App.css\";\nimport { makeStyles, createMuiTheme, ThemeProvider } from \"@material-ui/core\";\nimport blue from \"@material-ui/core/colors/blue\";\n\nconst useStyles = makeStyles({\n  myMargin: {\n    margin: \"100px auto\",\n    padding: \"0px 15px\",\n    maxWidth: \"2000px\",\n  },\n});\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <div className={classes.myMargin}>\n      <ThemeProvider theme={theme}>\n        <NewSearch />\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}